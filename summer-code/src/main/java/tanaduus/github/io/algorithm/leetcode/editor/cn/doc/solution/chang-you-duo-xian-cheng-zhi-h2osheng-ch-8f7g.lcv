> **欢迎阅读、点赞、转发、订阅，你的举手之间，我的动力源泉，欢评论区提供其他语言的版本**

![flamingo-4945829_960_720.jpg](https://pic.leetcode-cn.com/1615799010-XXykji-flamingo-4945829_960_720.jpg)

## [1117. H2O 生成](https://leetcode-cn.com/problems/building-h2o/)

### 方法1:Semaphore

- `Semaphore`是一个计数信号量。
- 从概念上将，`Semaphore`包含一组许可证。
- 如果有需要的话，每个`acquire()`方法都会阻塞，直到获取一个可用的许可证。
- 每个`release()`方法都会释放持有许可证的线程，并且归还`Semaphore`一个可用的许可证。
- 然而，实际上并没有真实的许可证对象供线程使用，`Semaphore`只是对可用的数量进行管理维护
- 总结：如果线程要访问一个资源就必须先获得信号量。如果信号量内部计数器大于0，信号量减1，然后允许共享这个资源；否则，如果信号量的计数器等于0，信号量将会把线程置入休眠直至计数器大于0.当信号量使用完时，必须释放

* java

```java
class H2O {


    private Semaphore hSema = new Semaphore(2);
    private Semaphore oSema = new Semaphore(0);


    public H2O() {

    }

    public void hydrogen(Runnable releaseHydrogen) throws InterruptedException {
        hSema.acquire();
        releaseHydrogen.run();
        oSema.release();
    }

    public void oxygen(Runnable releaseOxygen) throws InterruptedException {
        oSema.acquire(2);
        releaseOxygen.run();
        hSema.release(2);
    }
}
```

### 方法2:Semaphore+CyclicBarrier

- CyclicBarrier会自动充值

* java

```java
class H2O {
    private Semaphore hSema = new Semaphore(2);
    private Semaphore oSema = new Semaphore(1);
    private CyclicBarrier cb = new CyclicBarrier(3);

    public H2O() {

    }

    public void hydrogen(Runnable releaseHydrogen) throws InterruptedException {
        hSema.acquire();
        try {
            cb.await();
        } catch (BrokenBarrierException e) {
            e.printStackTrace();
        }
        releaseHydrogen.run();
        hSema.release();
    }

    public void oxygen(Runnable releaseOxygen) throws InterruptedException {
        oSema.acquire();
        try {
            cb.await();
        } catch (BrokenBarrierException e) {
            e.printStackTrace();
        }
        releaseOxygen.run();
        oSema.release();
    }
}
```

### 方法3:ReentrantLock+Condition

使用两个变量进行标记，每次满足条件后，重新开启下一轮

* java

```java
class H2O {

    private int oCnt = 0;
    private int hCnt = 0;
    private ReentrantLock lock = new ReentrantLock();
    private Condition con = lock.newCondition();

    public H2O() {

    }

    public void hydrogen(Runnable releaseHydrogen) throws InterruptedException {
        lock.lock();
        try {
            while (hCnt == 2) {
                con.await();
            }
            hCnt++;
            if (hCnt == 2 && oCnt == 1) {
                hCnt = 0;
                oCnt = 0;
            }
            releaseHydrogen.run();
            con.signalAll();
        } finally {
            lock.unlock();
        }

    }

    public void oxygen(Runnable releaseOxygen) throws InterruptedException {
        lock.lock();
        try {
            while (oCnt == 1) {
                con.await();
            }
            oCnt++;
            if (hCnt == 2 && oCnt == 1) {
                hCnt = 0;
                oCnt = 0;
            }
            releaseOxygen.run();
            con.signalAll();
        } finally {
            lock.unlock();
        }

    }
}
```

### 方法4:synchronized

* java

```java
class H2O {

    private volatile int state = 0;
    private Object obj = new Object();

    public H2O() {

    }

    public void hydrogen(Runnable releaseHydrogen) throws InterruptedException {
        synchronized (obj) {
            while (state == 2) {
                obj.wait();
            }
            state++;
            releaseHydrogen.run();
            obj.notifyAll();
        }

    }

    public void oxygen(Runnable releaseOxygen) throws InterruptedException {
        synchronized (obj) {
            while (state != 2) {
                obj.wait();
            }
            state = 0;
            releaseOxygen.run();
            obj.notifyAll();
        }

    }
}
```

### 方法5:BlockingQueue

* java

```java
class H2O {

    private int cnt = 0;
    private BlockingQueue<Integer> hQ = new LinkedBlockingDeque<>(2);
    private BlockingQueue<Integer> oQ = new LinkedBlockingDeque<>(1);

    public H2O() {

    }

    public void hydrogen(Runnable releaseHydrogen) throws InterruptedException {
        hQ.put(1);
        releaseHydrogen.run();
        cnt++;
        if (cnt == 3) {
            cnt = 0;
            hQ.clear();
            oQ.clear();
        }
    }

    public void oxygen(Runnable releaseOxygen) throws InterruptedException {
        oQ.put(1);
        releaseOxygen.run();
        cnt++;
        if (cnt == 3) {
            cnt = 0;
            hQ.clear();
            oQ.clear();
        }
    }
}
```

## 更多阅读

- N.O.1114->[畅游多线程之顺序打印及FollowUp](https://leetcode-cn.com/problems/print-in-order/solution/chang-you-duo-xian-cheng-zhi-zhi-shun-xu-it6f/)
- N.O.1115->[畅游多线程之交替打印FooBar](https://leetcode-cn.com/problems/print-foobar-alternately/solution/chang-you-duo-xian-cheng-zhi-1115-by-a-f-mf5u/)
- N.O.1116->[畅游多线程之打印零与奇偶数](https://leetcode-cn.com/problems/print-zero-even-odd/solution/chang-you-duo-xian-cheng-zhi-da-yin-ling-qy3o/)
- N.O.1117->[畅游多线程之H2O生成](https://leetcode-cn.com/problems/building-h2o/solution/chang-you-duo-xian-cheng-zhi-h2osheng-ch-8f7g/)
- N.O.1188->[畅游多线程之设计有限阻塞队列](https://blog.csdn.net/wat1r/article/details/119130292)
- N.O.1195->[畅游多线程之交替打印字符串](https://leetcode-cn.com/problems/fizz-buzz-multithreaded/solution/chang-you-duo-xian-cheng-zhi-jiao-ti-da-eeurc/)
- N.O.1279->[畅游多线程之红绿灯路口](https://blog.csdn.net/wat1r/article/details/119113504)

## 番外：

最近阿飞把链接做成了脑图（下图），整理起来，会做成PDF，感兴趣的同学关注下，不迷路，[个人主页【阿飞算法】](https://blog.csdn.net/wat1r/article/details/117533156) ，关注公众号会弹出资料下载地址，每个分支都可以点击链接跳转，欢迎入群交流学习。

![阿飞算法.png](https://pic.leetcode-cn.com/1630892220-MyzuIE-%E9%98%BF%E9%A3%9E%E7%AE%97%E6%B3%95.png)
